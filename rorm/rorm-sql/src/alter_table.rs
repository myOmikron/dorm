use crate::DBImpl;
use std::fmt::{Display, Formatter};

/**
Representation of operations to execute in the context of an ALTER TABLE statement.
*/
pub enum SQLAlterTableOperation {
    /// Use this operation to rename a table
    RenameTo { name: String },
    /// Use this operation to rename a column within a table
    RenameColumnTo {
        column_name: String,
        new_column_name: String,
    },
    /// Use this operation to add a column to an existing table.
    /// Can be generated by using [crate::create_table::SQLCreateColumn]
    AddColumn { operation: String },
    /// Use this operation to drop an existing column.
    DropColumn { name: String },
}

impl Display for SQLAlterTableOperation {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            SQLAlterTableOperation::RenameTo { name } => {
                write!(f, "RENAME TO {}", name)
            }
            SQLAlterTableOperation::RenameColumnTo {
                column_name,
                new_column_name,
            } => {
                write!(f, "RENAME COLUMN {} TO {}", column_name, new_column_name)
            }
            SQLAlterTableOperation::AddColumn { operation } => {
                write!(f, "ADD COLUMN {}", operation)
            }
            SQLAlterTableOperation::DropColumn { name } => {
                write!(f, "DROP COLUMN {}", name)
            }
        }
    }
}

/**
Representation of an ALTER TABLE statement.
*/
pub struct SQLAlterTable {
    pub(crate) dialect: DBImpl,
    /// Name of the table to operate on
    pub(crate) name: String,
    /// Operation to execute
    pub(crate) operation: SQLAlterTableOperation,
}

impl SQLAlterTable {
    /**
    This method is used to build the alter table statement.
    */
    pub fn build(self) -> anyhow::Result<String> {
        Ok(match self.dialect {
            DBImpl::SQLite => {
                format!("ALTER TABLE {} {};", self.name.as_str(), self.operation)
            }
        })
    }
}
