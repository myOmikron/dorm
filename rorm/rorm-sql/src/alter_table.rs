use crate::{value, DBImpl, SQLCreateColumn};

/**
Representation of operations to execute in the context of an ALTER TABLE statement.
*/
pub enum SQLAlterTableOperation<'post_build> {
    /// Use this operation to rename a table
    RenameTo {
        /// New name of the table
        name: String,
    },
    /// Use this operation to rename a column within a table
    RenameColumnTo {
        /// Current column name
        column_name: String,
        /// New column name
        new_column_name: String,
    },
    /// Use this operation to add a column to an existing table.
    /// Can be generated by using [crate::create_column::SQLCreateColumn]
    AddColumn {
        /// Operation to use for adding the column
        operation: SQLCreateColumn<'post_build>,
    },
    /// Use this operation to drop an existing column.
    DropColumn {
        /// Name of the column to drop
        name: String,
    },
}

impl<'post_build> SQLAlterTableOperation<'post_build> {
    fn build(self, trigger: &mut Vec<(String, Vec<value::Value<'post_build>>)>) -> String {
        match self {
            SQLAlterTableOperation::RenameTo { name } => format!("RENAME TO {}", name),
            SQLAlterTableOperation::RenameColumnTo {
                column_name,
                new_column_name,
            } => format!("RENAME COLUMN {} TO {}", column_name, new_column_name),
            SQLAlterTableOperation::AddColumn { operation } => {
                format!("ADD COLUMN {}", operation.build(trigger))
            }
            SQLAlterTableOperation::DropColumn { name } => format!("DROP COLUMN {}", name),
        }
    }
}

/**
Representation of an ALTER TABLE statement.
*/
pub struct SQLAlterTable<'post_build> {
    pub(crate) dialect: DBImpl,
    /// Name of the table to operate on
    pub(crate) name: String,
    /// Operation to execute
    pub(crate) operation: SQLAlterTableOperation<'post_build>,
    pub(crate) lookup: Vec<value::Value<'post_build>>,
    pub(crate) trigger: Vec<(String, Vec<value::Value<'post_build>>)>,
}

impl<'post_build> SQLAlterTable<'post_build> {
    /**
    This method is used to build the alter table statement.
    */
    pub fn build(mut self) -> (String, Vec<value::Value<'post_build>>) {
        match self.dialect {
            DBImpl::SQLite => (
                format!(
                    "ALTER TABLE {} {};{}",
                    self.name.as_str(),
                    self.operation.build(&mut self.trigger),
                    self.trigger
                        .into_iter()
                        .map(|(trigger, bind_params)| {
                            self.lookup.extend(bind_params);
                            trigger
                        })
                        .collect::<Vec<String>>()
                        .join(" ")
                ),
                self.lookup,
            ),
            _ => todo!("Not implemented yet!"),
        }
    }
}
