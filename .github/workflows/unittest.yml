name: Run Unittests
on:
  push:
    paths-ignore:
    - "*.md"
    - docs
  pull_request:

jobs:
  build-release:
    name: Build rorm-lib (release)
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        # - windows-latest
        # - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rorm/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-release

      - name: Build rorm-lib (release)
        run: cargo build -p rorm-lib -r
        working-directory: ./rorm

  build-debug:
    name: Build rorm-lib (debug)
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        # - windows-latest
        # - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rorm/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-debug

      - name: Build rorm-lib (debug)
        run: cargo build -p rorm-lib
        working-directory: ./rorm

  dubtest:
    name: Dub Tests
    needs: build-release
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        # - windows-latest
        # - macos-latest
        dc: [dmd-latest, ldc-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rorm/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-release

      - name: Build rorm-lib (release)
        run: cargo build -p rorm-lib -r
        working-directory: ./rorm

      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ matrix.dc }}

      - name: Run tests
        run: dub test
        working-directory: ./dorm

  cargotest:
    name: Cargo Tests
    needs: build-debug
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        # - windows-latest
        # - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rorm/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-debug

      - name: Run CLI tests
        run: cargo test -p rorm-cli
        working-directory: ./rorm

      - name: Run DB tests
        run: cargo test -p rorm-db -F tokio-rustls
        working-directory: ./rorm

      - name: Run declaration tests
        run: cargo test -p rorm-declaration
        working-directory: ./rorm

      - name: Run lib test
        run: cargo test -p rorm-lib
        working-directory: ./rorm

      - name: Run macro test
        run: cargo test -p rorm-macro
        working-directory: ./rorm

      - name: Run sql tests
        run: cargo test -p rorm-sql -F sqlite
        working-directory: ./rorm

      - name: Run root test
        run: cargo test -F tokio-rustls
        working-directory: ./rorm

  integration:
    name: Integration Tests
    needs: [dubtest, cargotest]
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        # - windows-latest
        # - macos-latest
        dc: [ldc-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rorm/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-release

      - name: Build rorm-lib (release)
        run: cargo build -p rorm-lib -r
        working-directory: ./rorm

      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ matrix.dc }}

      - name: Run integration tests
        run: ./run.sh
        working-directory: ./dorm/integration-tests/

  sample-project:
    name: Sample project usage
    needs: [cargotest]
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
        cargo_flags: ["", "-r"]
        config_file:
          - mysql.toml
          - postgres.toml
          - sqlite.toml
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup the databases
        run: |
          sudo systemctl start mysql.service
          mysql -e "CREATE USER user IDENTIFIED BY 'password';" -u root -p"root" -v
          mysql -e "CREATE DATABASE db;" -u root -p"root" -v
          mysql -e "GRANT ALL PRIVILEGES ON db.* TO user;" -u root -p"root" -v
          sudo systemctl start postgresql.service
          sudo psql -v ON_ERROR_STOP=1 <<-EOSQL
            CREATE USER user WITH PASSWORD 'password';
            CREATE DATABASE db;
            GRANT ALL PRIVILEGES ON DATABASE db TO user;
          EOSQL

      - name: Cargo build
        run: cargo build ${{ matrix.cargo_flags }}
        working-directory: ./rorm/rorm-sample

      - name: Migrate the database
        run: rorm-cli migrate --database-config ${{ matrix.config_file }}

      - name: Rescan for changed models
        run: cargo run -F rorm-main ${{ matrix.cargo_flags }}

      - name: Make new migrations
        run: rorm-cli make-migrations

      - name: Apply new migrations
        run: rorm-cli migrate --database-config ${{ matrix.config_file }}

      - name: Run the sample help
        run: cargo run -- --help

      - name: Run the sample project
        run: RUST_LOG=rorm=debug cargo run ${{ matrix.cargo_flags }} -- ${{ matrix.config_file }}
