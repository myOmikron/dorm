name: Run Unittests
on:
  push:
    paths-ignore:
    - "*.md"
    - docs
  pull_request:

jobs:
  build-release:
    name: Build rorm-lib (release)
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rorm/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-release

      - name: Build rorm-lib (release)
        run: cargo build -p rorm-lib -r
        working-directory: ./rorm

  build-debug:
    name: Build rorm-lib (debug)
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rorm/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-debug

      - name: Build rorm-lib (debug)
        run: cargo build -p rorm-lib
        working-directory: ./rorm

  dubtest:
    name: Dub Tests
    needs: build-release
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        # - windows-latest
        # - macos-latest
        dc: [dmd-latest, ldc-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rorm/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-release

      - name: Build rorm-lib (release)
        run: cargo build -p rorm-lib -r
        working-directory: ./rorm

      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ matrix.dc }}

      - name: Run tests
        run: dub test
        working-directory: ./dorm

  cargotest:
    name: Cargo Tests
    needs: build-debug
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        # - windows-latest
        # - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rorm/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-debug

      - name: Run CLI tests
        run: cargo test -p rorm-cli
        working-directory: ./rorm

      - name: Run DB tests
        run: cargo test -p rorm-db -F tokio-rustls
        working-directory: ./rorm

      - name: Run declaration tests
        run: cargo test -p rorm-declaration
        working-directory: ./rorm

      - name: Run lib test
        run: cargo test -p rorm-lib
        working-directory: ./rorm

      - name: Run macro test
        run: cargo test -p rorm-macro
        working-directory: ./rorm

      - name: Run sql tests
        run: cargo test -p rorm-sql -F sqlite
        working-directory: ./rorm

      - name: Run root test
        run: cargo test -F tokio-rustls
        working-directory: ./rorm

  integration:
    name: Integration Tests
    needs: [dubtest, cargotest]
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        # - windows-latest
        # - macos-latest
        dc: [ldc-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rorm/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-release

      - name: Build rorm-lib (release)
        run: cargo build -p rorm-lib -r
        working-directory: ./rorm

      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ matrix.dc }}

      - name: Run integration tests
        run: ./run.sh
        working-directory: ./dorm/integration-tests/

  install-rorm-cli:
    name: Install rorm-cli (binary)
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rorm/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-project

      - name: Install rorm-cli
        run: cargo install rorm-cli --path ./rorm/rorm-cli -f

  build-sample:
    name: Build the sample project
    needs: [install-rorm-cli]
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rorm/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-project

      - name: Create a debug build
        run: cargo build
        working-directory: ./rorm/rorm-sample

      - name: Create a release build
        run: cargo build --release
        working-directory: ./rorm/rorm-sample

  sample-project-mysql:
    name: Sample project (mysql)
    needs: [build-sample]
    strategy:
      fail-fast: false
      matrix:
        # Only Linux distros are supported due to the service below
        os: [ubuntu-latest]
        cargo_flags: ["", "--release"]
        mariadb_version: [10.5, 10.7, latest]
    runs-on: ${{ matrix.os }}

    services:
      mariadb:
        image: mariadb:${{ matrix.mariadb_version }}
        env:
          MARIADB_USER: user
          MARIADB_PASSWORD: password
          MARIADB_DATABASE: db
          MARIADB_RANDOM_ROOT_PASSWORD: yes
        ports:
          - 127.0.0.1:3306:3306/tcp
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rorm/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-project

      - name: Build and run the project
        run: CONFIG_FILE=mysql.toml CARGO_FLAGS=${{ matrix.cargo_flags }} bash ./build.sh
        working-directory: ./rorm/rorm-sample

  sample-project-postgres:
    name: Sample project (postgres)
    needs: [build-sample]
    strategy:
      fail-fast: false
      matrix:
        # Only Linux distros are supported due to the service below
        os: [ubuntu-latest]
        cargo_flags: ["", "--release"]
        postgres_version: [11, 12, 13, 14, 15]
    runs-on: ${{ matrix.os }}

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: db
        ports:
          - 127.0.0.1:5432:5432/tcp
        # Options are needed because the Postgres container does not provide a health check
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rorm/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-project

      - name: Build and run the project
        run: CONFIG_FILE=postgres.toml CARGO_FLAGS=${{ matrix.cargo_flags }} bash ./build.sh
        working-directory: ./rorm/rorm-sample

  sample-project-sqlite:
    name: Sample project (sqlite)
    needs: [build-sample]
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        cargo_flags: ["", "--release"]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rorm/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-project

      - name: Build rorm-cli again
        run: cargo install rorm-cli --path ../rorm-cli -f
        working-directory: ./rorm/rorm-sample

      - name: Migrate the database
        run: rorm-cli migrate --database-config sqlite.toml --log-sql
        working-directory: ./rorm/rorm-sample

      - name: Rescan for changed models
        run: cargo run -F rorm-main ${{ matrix.cargo_flags }}
        working-directory: ./rorm/rorm-sample

      - name: Make new migrations
        run: rorm-cli make-migrations
        working-directory: ./rorm/rorm-sample

      - name: Apply new migrations
        run: rorm-cli migrate --database-config sqlite.toml --log-sql
        working-directory: ./rorm/rorm-sample

      - name: Run the sample help
        run: cargo run -- --help
        working-directory: ./rorm/rorm-sample

      - name: Run the sample project
        run: RUST_LOG=rorm=debug cargo run ${{ matrix.cargo_flags }} -- sqlite.toml
        working-directory: ./rorm/rorm-sample
