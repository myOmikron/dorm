name: Build & Test for Windows
on:
  push:
    paths-ignore:
    - "*.md"
  pull_request:

defaults:
  run:
    shell: sh

# This CI configuration makes heavy use of the local cache of a self-hosted Windows runner, except for the first job
jobs:
  build-windows-shared:
    name: Build rorm from scratch
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Update rust
        run: rustup update

      - name: Build rorm
        run: cargo build -F tokio-rustls

      - name: Cargo test
        run: |
          cargo test -p rorm-macro
          cargo test -F tokio-rustls

      - name: Install rorm-cli from crates.io
        run: cargo install rorm-cli
        if: ${{ github.ref_name == 'main' }}

      - name: Install rorm-cli from git
        run: |
          git clone https://github.com/rorm-orm/rorm-cli --recursive
          cargo install rorm-cli --path rorm-cli
        if: ${{ github.ref_name != 'main' }}

      - name: Execute rorm-sample with SQLite
        env:
          CONFIG_FILE: "sqlite.toml"
        run: |
          set -x
          RUST_BACKTRACE=full cargo run -- --help
          echo Config: ${CONFIG_FILE}
          rm -rvf .models.json
          rorm-cli migrate --database-config "${CONFIG_FILE}" --log-sql
          cargo run -F rorm-main
          rorm-cli make-migrations
          rorm-cli migrate --database-config "${CONFIG_FILE}" --log-sql
          RUST_BACKTRACE=full RUST_LOG=rorm=debug cargo run -- "${CONFIG_FILE}"
        working-directory: ./rorm-sample

  build-windows:
    name: Build rorm
    runs-on: [ self-hosted, windows, x64 ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Build rorm
        run: CARGO_TARGET_DIR=~/cache/${GITHUB_REPOSITORY}/target ~/.cargo/bin/cargo build -F tokio-rustls

      - name: Run rorm-sample
        run: CARGO_TARGET_DIR=~/cache/${GITHUB_REPOSITORY}/target RUST_BACKTRACE=full ~/.cargo/bin/cargo run -- --help
        working-directory: ./rorm-sample

  cargo-test-windows:
    name: Cargo Tests
    needs: build-windows
    env:
      RUSTFLAGS: "-Cinstrument-coverage"
      LLVM_PROFILE_FILE: "coverage-rorm_%p-%m.profraw"
    runs-on: [ self-hosted, windows, x64 ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Run tests
        run: |
          export PATH=~/.cargo/bin:$PATH
          export CARGO_TARGET_DIR=~/cache/${GITHUB_REPOSITORY}/target
          cargo test -p rorm-macro
          cargo test -F tokio-rustls

  sample-project-windows:
    name: Sample project
    needs: [ cargo-test-windows ]
    runs-on: [ self-hosted, windows, x64 ]
    strategy:
      fail-fast: false
      matrix:
        config:
          - mysql.toml
          - postgres.toml
          - sqlite.toml

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Run the project for ${{ matrix.config }}
        run: |
          set -x
          export CARGO_TARGET_DIR=~/cache/${GITHUB_REPOSITORY}/target
          echo Config: ${{ matrix.config }}
          echo "DROP DATABASE db; CREATE DATABASE db;" | "C:\\Program Files\\MariaDB 10.6\\bin\\mysql.exe" -uroot -proot mysql
          echo "DROP DATABASE db; CREATE DATABASE db; ALTER DATABASE db OWNER TO username; GRANT ALL PRIVILEGES ON DATABASE db TO username;" | PGPASSWORD=postgres "C:\\Program Files\\PostgreSQL\\15\\bin\\psql.exe" -e -w -hlocalhost -Upostgres postgres
          rm -rvf .models.json
          ~/.cargo/bin/rorm-cli migrate --database-config "${{ matrix.config }}" --log-sql
          ~/.cargo/bin/cargo run -F rorm-main --quiet
          ~/.cargo/bin/rorm-cli make-migrations
          ~/.cargo/bin/rorm-cli migrate --database-config "${{ matrix.config }}" --log-sql
          RUST_BACKTRACE=full RUST_LOG=rorm=debug ~/.cargo/bin/cargo run -- "${{ matrix.config }}"
        working-directory: ./rorm-sample
